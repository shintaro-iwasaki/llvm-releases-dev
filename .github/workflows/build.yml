name: Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:

  build:
    
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        config: [release, assert]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          echo "XXX: git submodule update --init --recursive"

      - name: Compile
        run: |
          LLVM_VER="$(python3 build/get_llvm_version.py llvm-project/llvm/CMakeLists.txt)"

          CPU_ARCH="x86_64"

          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ]; then
            # internally it uses a docker to run 18.04
            PLATFORM_NAME="linux-gnu-ubuntu-18.04"
            BUILD_PLATFORM="docker_ubuntu_18.04"
          else
            PLATFORM_NAME="osx"
            BUILD_PLATFORM="local"
          fi

          CONFIG_SUFFIX="${{ matrix.config }}"

          FILENAME="clang+llvm-${LLVM_VER}-${CPU_ARCH}-${PLATFORM_NAME}-${CONFIG_SUFFIX}.tar.xz"

          sh build/build_llvm.sh -f $FILENAME -p $BUILD_PLATFORM -c ${{ matrix.config }}

          mkdir -p ${{ github.sha }}
          mv *.tar.xz ${{ github.sha }}/*.tar.xz

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'pull_request'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest

    needs: [build-ubuntu, extract-version]

    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

      - name: Arrange locations
        run: |
          ls -lah

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "release.tar.gz,foo/*.txt"
          bodyFile: "body.md"
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}

